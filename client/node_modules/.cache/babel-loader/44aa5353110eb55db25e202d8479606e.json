{"ast":null,"code":"// Action Types\nexport const SEARCH_DOGS_BY_NAME = \"SEARCH_DOGS_BY_NAME\";\nexport const LOAD_DOGS = \"LOAD_DOGS\";\nexport const FILTER_DOGS = \"FILTER_DOGS\";\nexport const SORT_DOGS = \"SORT_DOGS\";\nexport const SET_SORT = \"SET_SORT\";\nexport const GET_DOG_DETAIL = \"GET_DOG_DETAIL\";\nexport const CHANGE_PAGE = \"CHANGE_PAGE\";\nimport axios from \"axios\";\n\n// Acción para buscar razas de perros por nombre\nexport const searchDogsByName = name => {\n  return async dispatch => {\n    try {\n      const res = await axios.get(`http://localhost:3001/dogs/name?name=${name}`);\n      dispatch({\n        type: SEARCH_DOGS_BY_NAME,\n        payload: res.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n// Acción para cargar los primeros resultados de razas de perros\nexport const loadDogs = () => {\n  return async dispatch => {\n    try {\n      const res = await axios.get(\"http://localhost:3001/dogs\");\n      dispatch({\n        type: LOAD_DOGS,\n        payload: res.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n// Acción para filtrar razas de perros por temperamento y origen\nexport const filterDogs = (temperament, origin) => {\n  return async dispatch => {\n    try {\n      const res = await axios.get(`http://localhost:3001/dogs/filter?temperament=${temperament}&origin=${origin}`);\n      dispatch({\n        type: FILTER_DOGS,\n        payload: res.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n// Acción para ordenar razas de perros alfabéticamente y por peso\nexport const sortDogs = sortBy => {\n  return async dispatch => {\n    try {\n      const res = await axios.get(`http://localhost:3001/dogs/sort?sortBy=${sortBy}`);\n      dispatch({\n        type: SORT_DOGS,\n        payload: res.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n// Acción para para cambiar el tipo de clasificación actual de la lista de razas de perros.\nexport const setSort = sortType => ({\n  type: SET_SORT,\n  payload: sortType\n});\n\n// Acción para obtener el detalle de una raza de perro específica\nexport const getDogDetail = dogID => {\n  return async dispatch => {\n    try {\n      const res = await axios.get(`http://localhost:3001/dogs/id/${dogID}`);\n      dispatch({\n        type: GET_DOG_DETAIL,\n        payload: res.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n// Acción para cambiar la página actual del paginado\nexport const changePage = page => {\n  return {\n    type: CHANGE_PAGE,\n    payload: page\n  };\n};","map":{"version":3,"names":["SEARCH_DOGS_BY_NAME","LOAD_DOGS","FILTER_DOGS","SORT_DOGS","SET_SORT","GET_DOG_DETAIL","CHANGE_PAGE","axios","searchDogsByName","name","dispatch","res","get","type","payload","data","error","console","log","loadDogs","filterDogs","temperament","origin","sortDogs","sortBy","setSort","sortType","getDogDetail","dogID","changePage","page"],"sources":["/Users/andy/Desktop/Soy Henry || Full Stack/PROYECTO INDIVIDUAL/PI-SH-DOGS/client/src/redux/actions/index.js"],"sourcesContent":["// Action Types\nexport const SEARCH_DOGS_BY_NAME = \"SEARCH_DOGS_BY_NAME\";\nexport const LOAD_DOGS = \"LOAD_DOGS\";\nexport const FILTER_DOGS = \"FILTER_DOGS\";\nexport const SORT_DOGS = \"SORT_DOGS\";\nexport const SET_SORT = \"SET_SORT\";\nexport const GET_DOG_DETAIL = \"GET_DOG_DETAIL\";\nexport const CHANGE_PAGE = \"CHANGE_PAGE\";\n\nimport axios from \"axios\";\n\n// Acción para buscar razas de perros por nombre\nexport const searchDogsByName = (name) => {\n  return async (dispatch) => {\n    try {\n      const res = await axios.get(\n        `http://localhost:3001/dogs/name?name=${name}`\n      );\n      dispatch({ type: SEARCH_DOGS_BY_NAME, payload: res.data });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n// Acción para cargar los primeros resultados de razas de perros\nexport const loadDogs = () => {\n  return async (dispatch) => {\n    try {\n      const res = await axios.get(\"http://localhost:3001/dogs\");\n      dispatch({ type: LOAD_DOGS, payload: res.data });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n// Acción para filtrar razas de perros por temperamento y origen\nexport const filterDogs = (temperament, origin) => {\n  return async (dispatch) => {\n    try {\n      const res = await axios.get(\n        `http://localhost:3001/dogs/filter?temperament=${temperament}&origin=${origin}`\n      );\n      dispatch({ type: FILTER_DOGS, payload: res.data });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n// Acción para ordenar razas de perros alfabéticamente y por peso\nexport const sortDogs = (sortBy) => {\n  return async (dispatch) => {\n    try {\n      const res = await axios.get(\n        `http://localhost:3001/dogs/sort?sortBy=${sortBy}`\n      );\n      dispatch({ type: SORT_DOGS, payload: res.data });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n// Acción para para cambiar el tipo de clasificación actual de la lista de razas de perros.\nexport const setSort = (sortType) => ({\n  type: SET_SORT,\n  payload: sortType,\n});\n\n// Acción para obtener el detalle de una raza de perro específica\nexport const getDogDetail = (dogID) => {\n  return async (dispatch) => {\n    try {\n      const res = await axios.get(`http://localhost:3001/dogs/id/${dogID}`);\n      dispatch({ type: GET_DOG_DETAIL, payload: res.data });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n// Acción para cambiar la página actual del paginado\nexport const changePage = (page) => {\n  return { type: CHANGE_PAGE, payload: page };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}