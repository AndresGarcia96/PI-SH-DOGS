{"ast":null,"code":"// Action Types\nexport const FIND_BREEDS_BY_NAME = \"FIND_BREEDS_BY_NAME\";\nexport const GET_ALL_BREEDS = \"GET_ALL_BREEDS\";\nexport const GET_ALL_TEMPERAMENTS = \"GET_ALL_TEMPERAMENTS\";\nexport const FILTER_BY_TEMPERAMENT = \"FILTER_BY_TEMPERAMENT\";\nexport const FILTER_BY_ORIGIN = \"FILTER_BY_ORIGIN\";\nimport axios from \"axios\";\n\n// acción para encontrar razas de perro por su nombre (que coincidan con el término de búsqueda)\nexport const findBreedsByName = name => async dispatch => {\n  try {\n    const res = await axios.get(`/dogs?name=${name}`);\n    dispatch({\n      type: FIND_BREEDS_BY_NAME,\n      payload: res.data\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para obtener toda la lista de razas de perros\nexport const getAllBreeds = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/dogs\");\n    dispatch({\n      type: GET_ALL_BREEDS,\n      payload: res.data\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para obtener todos los temperamentos de las razas de perros\nexport const getAllTemperaments = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/temperaments\");\n    dispatch({\n      type: GET_ALL_TEMPERAMENTS,\n      payload: res.data\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para filtrar los perros por temperamento\nexport const filterByTemperament = temperament => async dispatch => {\n  try {\n    const res = await axios.get(`/dogs?temperament=${temperament}`);\n    dispatch({\n      type: FILTER_BY_TEMPERAMENT,\n      payload: res.data\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para filtrar por origen, ya sea obtener los perros de la API externa u obtener los perros de la base de datos interna\nexport const filterByOrigin = origin => async dispatch => {\n  try {\n    const res = await axios.get(`/dogs?origin=${origin}`);\n    dispatch({\n      type: FILTER_BY_ORIGIN,\n      payload: res.data\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para ordenar las razas de perros alfabéticamente\nexport const SORT_BREEDS_BY_NAME = \"SORT_BREEDS_BY_NAME\";\nexport const sortBreedsByName = order => async dispatch => {\n  try {\n    const res = await axios.get(`/dogs?order=name&direction=${order}`);\n    dispatch({\n      type: SORT_BREEDS_BY_NAME,\n      payload: res.data\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para ordenar las razas de perros por peso\nexport const SORT_BREEDS_BY_WEIGHT = \"SORT_BREEDS_BY_WEIGHT\";\nexport const sortBreedsByWeight = order => async dispatch => {\n  try {\n    const res = await axios.get(`/dogs?order=weight&direction=${order}`);\n    dispatch({\n      type: SORT_BREEDS_BY_WEIGHT,\n      payload: res.data\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para obtener el detalle de una raza de perro en específico\nexport const GET_BREED_DETAIL = \"GET_BREED_DETAIL\";\nexport const getBreedDetail = id => async dispatch => {\n  try {\n    const res = await axios.get(`/dogs/${id}`);\n    dispatch({\n      type: GET_BREED_DETAIL,\n      payload: res.data\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para cambiar la página del paginado\nexport const CHANGE_PAGE = \"CHANGE_PAGE\";\nexport const changePage = pageNumber => async dispatch => {\n  try {\n    const res = await axios.get(`/dogs?page=${pageNumber}`);\n    dispatch({\n      type: CHANGE_PAGE,\n      payload: res.data\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para limpiar la búsqueda\nexport const CLEAR_SEARCH = \"CLEAR_SEARCH\";\nexport const clearSearch = () => {\n  return {\n    type: CLEAR_SEARCH\n  };\n};","map":{"version":3,"names":["FIND_BREEDS_BY_NAME","GET_ALL_BREEDS","GET_ALL_TEMPERAMENTS","FILTER_BY_TEMPERAMENT","FILTER_BY_ORIGIN","axios","findBreedsByName","name","dispatch","res","get","type","payload","data","error","console","getAllBreeds","getAllTemperaments","filterByTemperament","temperament","filterByOrigin","origin","SORT_BREEDS_BY_NAME","sortBreedsByName","order","SORT_BREEDS_BY_WEIGHT","sortBreedsByWeight","GET_BREED_DETAIL","getBreedDetail","id","CHANGE_PAGE","changePage","pageNumber","CLEAR_SEARCH","clearSearch"],"sources":["/Users/andy/Desktop/Soy Henry || Full Stack/PROYECTO INDIVIDUAL/PI-SH-DOGS/client/src/redux/actions/index.js"],"sourcesContent":["// Action Types\nexport const FIND_BREEDS_BY_NAME = \"FIND_BREEDS_BY_NAME\";\nexport const GET_ALL_BREEDS = \"GET_ALL_BREEDS\";\nexport const GET_ALL_TEMPERAMENTS = \"GET_ALL_TEMPERAMENTS\";\nexport const FILTER_BY_TEMPERAMENT = \"FILTER_BY_TEMPERAMENT\";\nexport const FILTER_BY_ORIGIN = \"FILTER_BY_ORIGIN\";\n\nimport axios from \"axios\";\n\n// acción para encontrar razas de perro por su nombre (que coincidan con el término de búsqueda)\nexport const findBreedsByName = (name) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/dogs?name=${name}`);\n    dispatch({ type: FIND_BREEDS_BY_NAME, payload: res.data });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para obtener toda la lista de razas de perros\nexport const getAllBreeds = () => async (dispatch) => {\n  try {\n    const res = await axios.get(\"/dogs\");\n    dispatch({ type: GET_ALL_BREEDS, payload: res.data });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para obtener todos los temperamentos de las razas de perros\nexport const getAllTemperaments = () => async (dispatch) => {\n  try {\n    const res = await axios.get(\"/temperaments\");\n    dispatch({ type: GET_ALL_TEMPERAMENTS, payload: res.data });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para filtrar los perros por temperamento\nexport const filterByTemperament = (temperament) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/dogs?temperament=${temperament}`);\n    dispatch({ type: FILTER_BY_TEMPERAMENT, payload: res.data });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para filtrar por origen, ya sea obtener los perros de la API externa u obtener los perros de la base de datos interna\nexport const filterByOrigin = (origin) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/dogs?origin=${origin}`);\n    dispatch({ type: FILTER_BY_ORIGIN, payload: res.data });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para ordenar las razas de perros alfabéticamente\nexport const SORT_BREEDS_BY_NAME = \"SORT_BREEDS_BY_NAME\";\nexport const sortBreedsByName = (order) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/dogs?order=name&direction=${order}`);\n    dispatch({ type: SORT_BREEDS_BY_NAME, payload: res.data });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para ordenar las razas de perros por peso\nexport const SORT_BREEDS_BY_WEIGHT = \"SORT_BREEDS_BY_WEIGHT\";\nexport const sortBreedsByWeight = (order) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/dogs?order=weight&direction=${order}`);\n    dispatch({ type: SORT_BREEDS_BY_WEIGHT, payload: res.data });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para obtener el detalle de una raza de perro en específico\nexport const GET_BREED_DETAIL = \"GET_BREED_DETAIL\";\nexport const getBreedDetail = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/dogs/${id}`);\n    dispatch({ type: GET_BREED_DETAIL, payload: res.data });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para cambiar la página del paginado\nexport const CHANGE_PAGE = \"CHANGE_PAGE\";\nexport const changePage = (pageNumber) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/dogs?page=${pageNumber}`);\n    dispatch({ type: CHANGE_PAGE, payload: res.data });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para limpiar la búsqueda\nexport const CLEAR_SEARCH = \"CLEAR_SEARCH\";\nexport const clearSearch = () => {\n  return { type: CLEAR_SEARCH };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}