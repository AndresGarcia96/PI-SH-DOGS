{"ast":null,"code":"// Action Types\nexport const GET_BREEDS = \"GET_ALL_BREEDS\";\nexport const GET_BREED_DETAIL = \"GET_BREED_DETAIL\";\nexport const GET_ALL_TEMPERAMENTS = \"GET_ALL_TEMPERAMENTS\";\nexport const FILTER_BY_TEMPERAMENT = \"FILTER_BY_TEMPERAMENT\";\nexport const FILTER_BY_ORIGIN = \"FILTER_BY_ORIGIN\";\nexport const SORT_BREEDS_BY_NAME = \"SORT_BREEDS_BY_NAME\";\nexport const SORT_BREEDS_BY_WEIGHT = \"SORT_BREEDS_BY_WEIGHT\";\nexport const CHANGE_PAGE = \"CHANGE_PAGE\";\nexport const CLEAR_SEARCH = \"CLEAR_SEARCH\";\nexport const CLEAR_FILTERS = \"CLEAR_FILTERS\";\nimport axios from \"axios\";\nimport { findDogsApi, findDogsDb } from \"./aux\";\n\n// acción para encontrar razas de perro por su nombre o todos\nexport const findBreeds = name => async dispatch => {\n  try {\n    let res = [];\n    if (name) {\n      res = await axios.get(`http://localhost:3001/dogs/name?name=${name}`);\n    } else {\n      res = await axios.get(`http://localhost:3001/dogs`);\n    }\n    dispatch({\n      type: GET_BREEDS,\n      payload: res.data\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para obtener el detalle de una raza de perro en específico\nexport const getBreedDetail = id => async dispatch => {\n  try {\n    const res = await axios.get(`http://localhost:3001/dogs/id/${id}`);\n    dispatch({\n      type: GET_BREED_DETAIL,\n      payload: res.data\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para obtener todos los temperamentos de las razas de perros\nexport const getAllTemperaments = () => async dispatch => {\n  try {\n    const res = await axios.get(\"http://localhost:3001/dogs/temperaments\");\n    dispatch({\n      type: GET_ALL_TEMPERAMENTS,\n      payload: res.data\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para filtrar los perros por temperamento\nexport const filterByTemperament = temperament => async dispatch => {\n  try {\n    const res = await axios.get(`http://localhost:3001/dogs?temperament=${temperament}`);\n    dispatch({\n      type: FILTER_BY_TEMPERAMENT,\n      payload: res.data\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para filtrar por origen, ya sea obtener los perros de la API externa u obtener los perros de la base de datos interna\nexport const filterByOrigin = origin => async dispatch => {\n  try {\n    let dogs;\n    if (origin === \"api\") {\n      dogsApi = await axios.get(`http://localhost:3001/dogs`);\n    } else if (origin === \"db\") {\n      dogsDB = await findDogsDb();\n    }\n    dispatch({\n      type: FILTER_BY_ORIGIN,\n      payload: filteredDogs\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// acción para ordenar las razas de perros alfabéticamente\nexport const sortBreedsByName = order => async (dispatch, getState) => {\n  const breeds = getState().breeds;\n  let sortedBreeds = [...breeds];\n  if (order === \"asc\") {\n    sortedBreeds.sort((a, b) => {\n      if (a.name < b.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    });\n  } else if (order === \"desc\") {\n    sortedBreeds.sort((a, b) => {\n      if (a.name > b.name) {\n        return -1;\n      }\n      if (a.name < b.name) {\n        return 1;\n      }\n      return 0;\n    });\n  }\n  dispatch({\n    type: SORT_BREEDS_BY_NAME,\n    payload: sortedBreeds\n  });\n};\n\n// acción para ordenar las razas de perros por peso\nexport const sortBreedsByWeight = order => async (dispatch, getState) => {\n  const breeds = getState().breeds;\n  let sortedBreeds = [...breeds];\n  if (order === \"asc\") {\n    sortedBreeds.sort((a, b) => a.weight - b.weight);\n  } else if (order === \"desc\") {\n    sortedBreeds.sort((a, b) => b.weight - a.weight);\n  }\n  dispatch({\n    type: SORT_BREEDS_BY_WEIGHT,\n    payload: sortedBreeds\n  });\n};\n\n// acción para actualizar el número de página en la paginación\nexport const changePage = pageNumber => async dispatch => {\n  dispatch({\n    type: CHANGE_PAGE,\n    payload: pageNumber\n  });\n};\n\n// acción para limpiar los filtros de búsqueda\nexport const clearFilters = () => async dispatch => {\n  // dispatch({ type: FILTER_BY_TEMPERAMENT_CLEAR, payload: null });\n  // dispatch({ type: FILTER_BY_ORIGIN_CLEAR, payload: null });\n  dispatch({\n    type: CLEAR_FILTERS\n  });\n};\n\n// acción para limpiar la búsqueda\nexport const clearSearch = () => async dispatch => {\n  dispatch({\n    type: CLEAR_SEARCH\n  });\n};","map":{"version":3,"names":["GET_BREEDS","GET_BREED_DETAIL","GET_ALL_TEMPERAMENTS","FILTER_BY_TEMPERAMENT","FILTER_BY_ORIGIN","SORT_BREEDS_BY_NAME","SORT_BREEDS_BY_WEIGHT","CHANGE_PAGE","CLEAR_SEARCH","CLEAR_FILTERS","axios","findDogsApi","findDogsDb","findBreeds","name","dispatch","res","get","type","payload","data","error","console","getBreedDetail","id","getAllTemperaments","filterByTemperament","temperament","filterByOrigin","origin","dogs","dogsApi","dogsDB","filteredDogs","log","sortBreedsByName","order","getState","breeds","sortedBreeds","sort","a","b","sortBreedsByWeight","weight","changePage","pageNumber","clearFilters","clearSearch"],"sources":["/Users/andy/Desktop/Soy Henry || Full Stack/PROYECTO INDIVIDUAL/PI-SH-DOGS/client/src/redux/actions/index.js"],"sourcesContent":["// Action Types\nexport const GET_BREEDS = \"GET_ALL_BREEDS\";\nexport const GET_BREED_DETAIL = \"GET_BREED_DETAIL\";\nexport const GET_ALL_TEMPERAMENTS = \"GET_ALL_TEMPERAMENTS\";\nexport const FILTER_BY_TEMPERAMENT = \"FILTER_BY_TEMPERAMENT\";\nexport const FILTER_BY_ORIGIN = \"FILTER_BY_ORIGIN\";\nexport const SORT_BREEDS_BY_NAME = \"SORT_BREEDS_BY_NAME\";\nexport const SORT_BREEDS_BY_WEIGHT = \"SORT_BREEDS_BY_WEIGHT\";\nexport const CHANGE_PAGE = \"CHANGE_PAGE\";\nexport const CLEAR_SEARCH = \"CLEAR_SEARCH\";\nexport const CLEAR_FILTERS = \"CLEAR_FILTERS\";\n\nimport axios from \"axios\";\nimport { findDogsApi, findDogsDb } from \"./aux\";\n\n// acción para encontrar razas de perro por su nombre o todos\nexport const findBreeds = (name) => async (dispatch) => {\n  try {\n    let res = [];\n    if (name) {\n      res = await axios.get(`http://localhost:3001/dogs/name?name=${name}`);\n    } else {\n      res = await axios.get(`http://localhost:3001/dogs`);\n    }\n    dispatch({ type: GET_BREEDS, payload: res.data });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para obtener el detalle de una raza de perro en específico\nexport const getBreedDetail = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get(`http://localhost:3001/dogs/id/${id}`);\n    dispatch({ type: GET_BREED_DETAIL, payload: res.data });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para obtener todos los temperamentos de las razas de perros\nexport const getAllTemperaments = () => async (dispatch) => {\n  try {\n    const res = await axios.get(\"http://localhost:3001/dogs/temperaments\");\n    dispatch({ type: GET_ALL_TEMPERAMENTS, payload: res.data });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para filtrar los perros por temperamento\nexport const filterByTemperament = (temperament) => async (dispatch) => {\n  try {\n    const res = await axios.get(\n      `http://localhost:3001/dogs?temperament=${temperament}`\n    );\n    dispatch({ type: FILTER_BY_TEMPERAMENT, payload: res.data });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// acción para filtrar por origen, ya sea obtener los perros de la API externa u obtener los perros de la base de datos interna\nexport const filterByOrigin = (origin) => async (dispatch) => {\n  try {\n    let dogs;\n    if (origin === \"api\") {\n      dogsApi = await axios.get(`http://localhost:3001/dogs`);\n    } else if (origin === \"db\") {\n      dogsDB = await findDogsDb();\n    }\n    dispatch({\n      type: FILTER_BY_ORIGIN,\n      payload: filteredDogs,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// acción para ordenar las razas de perros alfabéticamente\nexport const sortBreedsByName = (order) => async (dispatch, getState) => {\n  const breeds = getState().breeds;\n  let sortedBreeds = [...breeds];\n\n  if (order === \"asc\") {\n    sortedBreeds.sort((a, b) => {\n      if (a.name < b.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    });\n  } else if (order === \"desc\") {\n    sortedBreeds.sort((a, b) => {\n      if (a.name > b.name) {\n        return -1;\n      }\n      if (a.name < b.name) {\n        return 1;\n      }\n      return 0;\n    });\n  }\n\n  dispatch({ type: SORT_BREEDS_BY_NAME, payload: sortedBreeds });\n};\n\n// acción para ordenar las razas de perros por peso\nexport const sortBreedsByWeight = (order) => async (dispatch, getState) => {\n  const breeds = getState().breeds;\n  let sortedBreeds = [...breeds];\n\n  if (order === \"asc\") {\n    sortedBreeds.sort((a, b) => a.weight - b.weight);\n  } else if (order === \"desc\") {\n    sortedBreeds.sort((a, b) => b.weight - a.weight);\n  }\n\n  dispatch({ type: SORT_BREEDS_BY_WEIGHT, payload: sortedBreeds });\n};\n\n// acción para actualizar el número de página en la paginación\nexport const changePage = (pageNumber) => async (dispatch) => {\n  dispatch({ type: CHANGE_PAGE, payload: pageNumber });\n};\n\n// acción para limpiar los filtros de búsqueda\nexport const clearFilters = () => async (dispatch) => {\n  // dispatch({ type: FILTER_BY_TEMPERAMENT_CLEAR, payload: null });\n  // dispatch({ type: FILTER_BY_ORIGIN_CLEAR, payload: null });\n  dispatch({ type: CLEAR_FILTERS });\n};\n\n// acción para limpiar la búsqueda\nexport const clearSearch = () => async (dispatch) => {\n  dispatch({ type: CLEAR_SEARCH });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}